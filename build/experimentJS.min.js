(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports):typeof define==="function"&&define.amd?define(["exports"],factory):factory(global.ExperimentJS=global.ExperimentJS||{})})(this,function(exports){"use strict";function createDownloadLink(filename,data){var a=document.createElement("a");a.href=data;a.target="_blank";a.download=filename;return a}Array.prototype.shuffle=function(){var currentIndex=this.length,temporaryValue,randomIndex;while(0!==currentIndex){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex-=1;temporaryValue=this[currentIndex];this[currentIndex]=this[randomIndex];this[randomIndex]=temporaryValue}};function getParamNames(fn){var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;var ARGUMENT_NAMES=/([^\s,]+)/g;function _getParamNames(func){var fnStr=func.toString().replace(STRIP_COMMENTS,"");var result=fnStr.slice(fnStr.indexOf("(")+1,fnStr.indexOf(")")).match(ARGUMENT_NAMES);if(result===null)result=[];return result}return _getParamNames(fn)}var Trials={};var IVs={};var setFuncs={};var expRepeats=1;Trials.setIVLevels=function(ivname,levels){_setIVGeneric(ivname,"levels",levels)};Trials.setIVsetFunc=function(ivname,setFunc){_setIVGeneric(ivname,"setFunc",true);_setSetFunc(ivname,setFunc)};var _dvName;Trials.setDVName=function(dvName){if(typeof dvName==="string"){_csvIllegalCharCheck(dvName);_dvName=dvName}else{throw new Error("The supplied DV name must be of type String")}};Trials.setIVTrialParserFunc=function(ivname,parserFunc){_setIVGeneric(ivname,"parserFunc",parserFunc)};Trials.setRepeats=function(nRepeats){expRepeats=nRepeats};function _setIVGeneric(ivName,fieldName,fieldVal){_csvIllegalCharCheck(ivName);_csvIllegalCharCheck(fieldName);if(!IVs.hasOwnProperty(ivName)){IVs[ivName]={}}IVs[ivName][fieldName]=fieldVal}function _setSetFunc(ivname,setfunc){setFuncs[ivname]=setfunc}var _totalTrials=-1;var _allTrials=[];function _setAllTrials(alltrials){if(alltrials.constructor===Array){_allTrials=alltrials}}Trials.getTrials=function(){if(_allTrials.length>0){return $.extend(true,[],_allTrials)}};var _didBuildTrials=false;function _buildTrials(printTrials){console.log("Build Trials. IVS:",IVs);var buildingTrial,temp;for(var iv in IVs){if(IVs[iv].levels===undefined)throw new Error("Levels not supplied for "+iv);if(IVs[iv].setFunc===undefined)throw new Error("Setter function not supplied for "+iv);console.log("Extending all trials array with: "+iv+" ("+IVs[iv].levels.length+" levels)");if(setFuncs[iv]===undefined)throw new Error("SetFunc not defined for "+iv);temp=[];var len=_allTrials.length===0?1:_allTrials.length;for(var i=0;i<len;++i){buildingTrial=_allTrials.pop();for(var j=0;j<IVs[iv].levels.length;++j){var curIVLevel={};curIVLevel.description=iv;curIVLevel.value=IVs[iv].levels[j];if(IVs[iv].hasOwnProperty("std_2AFC")){curIVLevel.std_2AFC=IVs[iv].std_2AFC}if(IVs[iv].hasOwnProperty("std_2AFC_simultaneous_target")){curIVLevel.std_2AFC_simultaneous_target=IVs[iv].std_2AFC_simultaneous_target}if(IVs[iv].parserFunc!==undefined){curIVLevel.parserFunc=IVs[iv].parserFunc}var newOrExtendedTrial;if(buildingTrial===undefined){newOrExtendedTrial=[curIVLevel]}else if(buildingTrial.constructor===Array){newOrExtendedTrial=buildingTrial.concat([curIVLevel])}temp.push(newOrExtendedTrial)}}_allTrials=temp}var repeats=expRepeats;temp=[];for(i=0;i<repeats;i++){temp=temp.concat(_allTrials)}_allTrials=temp;console.log("There are ",_allTrials.length,"trials (using",repeats,"repeats)");if(printTrials){for(i=0;i<_allTrials.length;i++){console.log("TRIAL ",i);for(j=0;j<_allTrials[i].length;j++){console.log(_allTrials[i][j])}console.log("******* ******* ******* *******")}}if(_shouldShuffle)_allTrials.shuffle();_totalTrials=_allTrials.length;_didBuildTrials=true}Trials.buildExperiment=function(printTrials){_buildTrials(printTrials===undefined?false:printTrials)};var _shouldShuffle=true;Trials.setShuffle=function(shouldShuffle){if(typeof shouldShuffle==="boolean"){_shouldShuffle=shouldShuffle}else{throw new Error("setShuffle only accepts boolean argument")}};function _csvIllegalCharCheck(string){if(typeof string!=="string"){throw new Error("You must supply a variable of type String for this method")}if(string.indexOf(",")!==-1){throw new Error("Strings used by ExperimentJS may not contain commas: "+string)}}var Pause={};Pause.showInterstimulusPause=function(duration){return new Promise(function(resolve,reject){_interstimulusPause(duration).then(function(){resolve()})})};var _pause=500;Pause.setPauseTime=function(value){if(value===parseInt(value,10)){_pause=value}else{throw"setPauseTime only takes integers"}};var _shouldInterstimulusPause=true;Pause.setShouldInterstimulusPause=function(value){if(typeof value==="boolean"){_shouldInterstimulusPause=value}};var _blackOut=$("<div>",{id:"interstimulus-pause",css:{position:"fixed",left:0,top:0,width:"100vw",height:"100vh",background:"black"}});$(document.body).append(_blackOut);$("#interstimulus-pause").hide();var _isInterstimulusPause=false;function _interstimulusPause(duration){duration=duration===undefined?_pause:duration;return new Promise(function(resolve,reject){$("#interstimulus-pause").show();_isInterstimulusPause=true;_setShouldRunNextTrial(false);setTimeout(function(){$("#interstimulus-pause").hide();_isInterstimulusPause=false;_setShouldRunNextTrial(true);resolve()},duration)})}var _pptName="unnamed_ppt";var _pptNo=0;Trials.getPptInfo=function(){while(true){_pptName=prompt("Please enter your name").trim();console.log("name was",_pptName);if(_pptName===""||_pptName===null){alert("Name cannot be blank")}else{break}}while(true){_pptNo=parseInt(prompt("Please enter your participant number"));console.log("ppt number was",_pptNo);if(isNaN(_pptNo)){alert("Participant number must be an integer")}else{break}}console.log("Participant name: ",_pptName,"\tParticipant number: ",_pptNo)};function _setShouldRunNextTrial(value){if(typeof value==="boolean"){_shouldRunNextTrial=value}else{throw new Error("cannot set _shouldRunNextTrial to a non boolean value")}}var _shouldRunNextTrial=true;Trials.runNextTrial=function(settings){if(!_didBuildTrials){throw new Error("runNextTrial(): Trial were not built");return}if(_shouldRunNextTrial){if(_shouldRunMidCallback()&&_midCallback!==null){_midCallback()}if(_shouldInterstimulusPause){_interstimulusPause()}if(settings!==undefined&&settings.hasOwnProperty("shouldStoreResponse")&&settings.shouldStoreResponse){_storeResponse(settings)}if(_allTrials.length>0){_displayNextTrial();console.log("There are ",_allTrials.length," trials remaining.")}else{$(document.body).children().fadeOut();_outputResponses(_responses);if(_endCallBack!==undefined)_endCallBack()}}};var _didRunMidCallback=false;var _midCallback=null;Trials.setMidCallback=function(value){if(typeof value==="function"){_midCallback=value}else{throw new Error("Only functions may be assigned to the end callback")}};function _shouldRunMidCallback(){if(_didRunMidCallback)return false;if(_allTrials.length===_responses.length||Math.abs(_allTrials.length-_responses.length)===1){_didRunMidCallback=true;return true}}var _endCallBack=null;Trials.setEndCallback=function(value){if(typeof value==="function"){_endCallBack=value}else{throw new Error("Only functions may be assigned to the end callback")}};function _displayNextTrial(){var nextTrial=_allTrials[_allTrials.length-1];console.log("Displaying next trial:",nextTrial);for(var i=0;i<nextTrial.length;++i){var cur_iv=nextTrial[i];_fireIVSetFuncWithArgs(cur_iv)}}function _fireIVSetFuncWithArgs(cur_iv){if(setFuncs[cur_iv.description]!==undefined){setFuncs[cur_iv.description].apply(null,cur_iv.value)}else{throw new Error("No setter function supplied by: "+cur_iv)}}var _responses=[];function _setResponses(responses){if(responses.constructor===Array){_responses=responses}else{throw new Error("reponses can only be set to an array")}}function _storeResponse(options){var lastTrial=_allTrials.pop();var responseFormatted={};for(var i=0;i<lastTrial.length;++i){var ivNum="IV"+i;if(lastTrial[i].parserFunc!==undefined&&$.isFunction(lastTrial[i].parserFunc)){var stdName=ivNum+"_"+lastTrial[i].description+"_value";responseFormatted[stdName]=lastTrial[i].parserFunc.apply(this,lastTrial[i].value.concat(i))}else if(lastTrial[i].value.constructor===Array){if(lastTrial[i].value.length>1){var arg_names,arg_name;arg_names=getParamNames(setFuncs[lastTrial[i].description]);for(var j=0;j<lastTrial[i].value.length;++j){arg_name=arg_names[j];responseFormatted[ivNum+"_"+lastTrial[i].description+"_value_"+arg_name]=lastTrial[i].value[j]}}else{responseFormatted[ivNum+"_"+lastTrial[i].description+"_value"]=lastTrial[i].value[0]}}else{responseFormatted[ivNum+"_"+lastTrial[i].description+"_value"]=lastTrial[i].value}if(lastTrial[i].hasOwnProperty("std_2AFC")){responseFormatted["std_2AFC"]=lastTrial[i].std_2AFC}}if(options!==undefined&&options.hasOwnProperty("dv_value")){var value=_dvName||"value";responseFormatted["DV_"+value]=options.dv_value}else{alert("No DV was supplied by the calling code. This is an error.");responseFormatted["DV_value"]="ERROR - No DV supplied"}console.log("STORED THIS RESPONSE: ",responseFormatted);_responses.push(responseFormatted)}Trials.forceOutputResponses=function(){console.log("Forcing output of _responses");_outputResponses(_responses,true)};function _outputResponses(allResponses,log){if(allResponses.length===0)return;var csvString="";var keys=Object.keys(allResponses[0]);csvString+="Participant Name, Participant Number, ";for(var i=0;i<keys.length;i++){csvString+=keys[i]+","}csvString=csvString.slice(0,-1)+"\n";for(i=0;i<allResponses.length;i++){csvString+=_pptName+","+_pptNo+",";for(var j=0;j<keys.length;j++){var value=allResponses[i][keys[j]];csvString+=value+","}csvString=csvString.slice(0,-1)+"\n"}if(log){console.log(csvString)}var csvContent=encodeURI("data:text/csv;charset=utf-8,"+csvString);var a=createDownloadLink("results ("+_pptName+","+_pptNo.toString()+").csv",csvContent);a.innerHTML="<h4>Click to download results!</h4>";a.className+=" results-download";document.body.appendChild(a);a.click()}var Saves={};Saves.parseTrialsForSaving=undefined;Saves.parseResponsesForSaving=undefined;Saves.unparseSavedTrials=undefined;Saves.unparseSavedResponses=undefined;function errorCheckSavingParsers(){if(Saves.parseTrialsForSaving===undefined)throw new Error("Cannot restore trials without parsing function");if(Saves.parseResponsesForSaving===undefined)throw new Error("Cannot restore _responses without parsing function");if(Saves.unparseSavedTrials===undefined)throw new Error("Cannot restore trials without UNparsing function");if(Saves.unparseSavedResponses===undefined)throw new Error("Cannot restore _responses without UNparsing function")}Saves.clearSaves=function(){localStorage.removeItem("experimentJSsaves")};Saves.saveBuiltTrialsAndResponses=function(){errorCheckSavingParsers();if(typeof Storage!=="undefined"){var trialsForSaving=Saves.parseTrialsForSaving(_allTrials);var responsesForSaving=Saves.parseResponsesForSaving(_responses);var experimentJSsaves={};experimentJSsaves["trials"]=trialsForSaving;experimentJSsaves["responses"]=responsesForSaving;var msg=prompt("Add a message to this save!");if(msg===null){alert("Trials will not be saved");return}var dateKey=(new Date).toUTCString();var keyed_by_dates=localStorage.experimentJSsaves===undefined?{}:JSON.parse(localStorage.experimentJSsaves);keyed_by_dates[msg+" - "+dateKey]=experimentJSsaves;localStorage.experimentJSsaves=JSON.stringify(keyed_by_dates);console.log("Saved Trials",JSON.parse(localStorage.experimentJSsaves))}};Saves.setSavedTrialsAndResponses=function(){errorCheckSavingParsers();var all_saves=JSON.parse(localStorage.experimentJSsaves);console.log("all saves+ ",all_saves);var select_bits=_createDropDownSelect(all_saves);select_bits.button.click(function(){var temp_using=select_bits.select.find(":selected").text();temp_using=all_saves[temp_using];_setAllTrials(Saves.unparseSavedTrials(temp_using["trials"]));_setResponses(Saves.unparseSavedResponses(temp_using["responses"]));if(_responses===undefined||_responses===null)_setResponses([]);console.log("restored all trials: ",_allTrials);console.log("restored all _responses: ",_responses);Trials.runNextTrial();select_bits.wrap.remove()});select_bits.button_clear.click(function(){if(window.confirm("Are you sure you want to delete all saved experiments?")){Saves.clearSaves()}select_bits.wrap.remove()})};function _createDropDownSelect(all_saves){var div=$("<div>",{id:"saved_info"});var sel=$("<select>");Object.keys(all_saves).map(function(elem,i,all){sel.append($("<option>").attr("value",i).text(elem))});var b=$("<button>").text("Choose");var b_clear=$("<button>").text("Clear");div.append(sel);div.append($("<br>"));div.append(b);div.append(b_clear);$(document.body).append(div);div.css({position:"fixed",top:"45vh",left:"25vw",width:"50vw",height:"5vh",background:"white",border:"2vw","text-align":"center"});return{select:sel,button:b,button_clear:b_clear,wrap:div}}exports.Trials=Trials;exports.Pause=Pause;exports.Saves=Saves;Object.defineProperty(exports,"__esModule",{value:true})});
