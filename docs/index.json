[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ExperimentJS.js",
    "content": "\nimport \"./utils/utils.js\";\n\nexport * from \"./core/core.js\";\nexport * from \"./methods/methods.js\";",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/ExperimentJS.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/core/GetPptInfo.js",
    "content": "/**\n * Created by kai on 6/7/17.\n */\nimport { Trials } from \"./Trials.js\";\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                      Experiment Lifecycle - Get Participant Info\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nexport var _pptName = \"unnamed_ppt\";\nexport var _pptNo = 0;\n\n/**\n * Get participant number and name.\n */\nTrials.getPptInfo = function () {\n    \n    while (true) {\n        _pptName = prompt(\"Please enter your name\").trim();\n        console.log(\"name was\", _pptName);\n        if (_pptName === \"\" || _pptName === null) {\n            alert(\"Name cannot be blank\");\n        } else {\n            break;\n        }\n    }\n\n    while (true) {\n        _pptNo = parseInt(prompt(\"Please enter your participant number\"));\n        console.log(\"ppt number was\", _pptNo);\n        if (isNaN(_pptNo)) {\n            alert(\"Participant number must be an integer\");\n        } else {\n            break;\n        }\n    }\n\n    console.log(\"Participant name: \", _pptName, \"\\tParticipant number: \", _pptNo);\n};",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/GetPptInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "_pptName",
    "memberof": "src/core/GetPptInfo.js",
    "static": true,
    "longname": "src/core/GetPptInfo.js~_pptName",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/GetPptInfo.js",
    "importStyle": "{_pptName}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "_pptNo",
    "memberof": "src/core/GetPptInfo.js",
    "static": true,
    "longname": "src/core/GetPptInfo.js~_pptNo",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/GetPptInfo.js",
    "importStyle": "{_pptNo}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "getPptInfo",
    "memberof": "src/core/GetPptInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/GetPptInfo.js~getPptInfo",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/GetPptInfo.js",
    "importStyle": null,
    "description": "Get participant number and name.",
    "lineNumber": 16,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/core/InterstimulusPause.js",
    "content": "\n\nimport { _setShouldRunNextTrial } from \"./RunExperiment.js\"; // _shouldRunNextTrial,\nimport { SetCSSOnElement } from \"../utils/SetCSSOnElement.js\";\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                  Interstimulus Pause - creation\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nfunction _createInterstimulusPause(){\n    var blackout = document.createElement(\"div\");\n    blackout.id = \"interstimulus-pause\";\n\n    var css = {                             // Set blackout style\n        position: \"fixed\",\n        left: 0,\n        top: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"black\",\n        display: \"none\",                     // block when visible\n        'z-index': 99999999\n    };\n\n    SetCSSOnElement(blackout, css);\n    \n    return blackout;\n}\n\nvar _blackOut = _createInterstimulusPause();\ndocument.body.appendChild(_blackOut);\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                  Interstimulus Pause - use\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nvar Pause = {};\n\n/**\n * Manually fire the interstimulus pause and black out the screen\n * @param {int} duration - milliseconds to show the interstimulus pause\n * @returns {Promise}\n */\nPause.showInterstimulusPause = function (duration) {\n    return new Promise(function (resolve, reject) {\n        _interstimulusPause(duration).then(function () {\n            resolve();\n        });\n    });\n};\n\nvar _pause = 500;\n/**\n * @param {int} pause_duration - set length of the interstimulus pause\n */\nPause.setPauseTime = function (pause_duration) {\n    if (pause_duration === parseInt(pause_duration, 10)) {\n        _pause = pause_duration;\n    } else {\n        throw new Error(\"setPauseTime only takes integers\");\n    }\n};\n\nexport var _shouldInterstimulusPause = true;                        //used in: RunExperiment.js\n/**\n * Turn the interstimulus pause on or off\n * @param {bool} - value\n */\nPause.setShouldInterstimulusPause = function(value){\n    if (typeof  value === \"boolean\"){\n        _shouldInterstimulusPause = value;\n    }\n};\n\n\nvar _isInterstimulusPause = false;\nexport function _interstimulusPause(duration) {                     // used in: RunExperiment.js\n\n    duration = duration === undefined ? _pause : duration;          //Default to pause time unless an argument is supplied\n\n    return new Promise(function (resolve, reject) {\n\n        if (!_shouldInterstimulusPause) reject();                   // Dont show the pause if it hasnt been set. This check is also performed in RunExperiment.js\n\n        _showInterstimulusPause(_blackOut);\n        _isInterstimulusPause = true;\n        _setShouldRunNextTrial(false);\n\n        /* Prevent button mashing while the pause runs */\n        setTimeout(function () {\n\n            _hideInterstimulusPause(_blackOut);\n            _isInterstimulusPause = false;\n            _setShouldRunNextTrial(true);                           // Cannot reassign imported values, so you need a setter\n\n            resolve();                                              // Promise has resolved here\n        }, duration);\n    });\n}\n\n\nfunction _hideInterstimulusPause(blackout){\n    blackout.style.display = \"none\";\n}\n\nfunction _showInterstimulusPause(blackout){\n    blackout.style.display = \"block\";\n}\n\nexport { Pause };",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/InterstimulusPause.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "_createInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_createInterstimulusPause",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "_blackOut",
    "memberof": "src/core/InterstimulusPause.js",
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_blackOut",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "showInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~showInterstimulusPause",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": "Manually fire the interstimulus pause and black out the screen",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "milliseconds to show the interstimulus pause"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "_pause",
    "memberof": "src/core/InterstimulusPause.js",
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_pause",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "setPauseTime",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~setPauseTime",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pause_duration",
        "description": "set length of the interstimulus pause"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "_shouldInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_shouldInterstimulusPause",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": "{_shouldInterstimulusPause}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "setShouldInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~setShouldInterstimulusPause",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": "Turn the interstimulus pause on or off",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "value"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "_isInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_isInterstimulusPause",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "_interstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_interstimulusPause",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": "{_interstimulusPause}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "_hideInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_hideInterstimulusPause",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "blackout",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "_showInterstimulusPause",
    "memberof": "src/core/InterstimulusPause.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/InterstimulusPause.js~_showInterstimulusPause",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "blackout",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "Pause",
    "memberof": "src/core/InterstimulusPause.js",
    "static": true,
    "longname": "src/core/InterstimulusPause.js~Pause",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/core/InterstimulusPause.js",
    "importStyle": "{Pause}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/core/ResponseHandler.js",
    "content": "import { _allTrials, setFuncs, _dvName } from \"./Trials\";\nimport { getParamNames } from \"../utils/StringUtils.js\";\nimport { _Unserializable_Token2Var } from \"./UnserializableMap.js\";\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                 Experiment Lifecycle - Store Response\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\nexport var _responses = [];\n\nexport function _setResponses(responses){                       // Used in ./Saves.js. Has to live here as it redefines _responses\n    if (responses.constructor === Array){\n        _responses = responses;\n    } else {\n        throw new Error(\"reponses can only be set to an array\");\n    }\n}\n\n// Responsible for changing hte lengths of _allTrials and _responses\nexport function _storeResponse(options) {                       // Used in ./RunExperiment.js\n\n    if (options === undefined || !options.hasOwnProperty(\"dv_value\")){\n        throw new Error(\"A dependent variable (DV) must be supplied by the calling code. This is an error.\");       // Do not continue to next trial if DV is not supplied\n    }\n\n    var lastTrial = _allTrials.pop();\n\n    var response = {\n        trial: lastTrial,                                           // Store the tokenised trial (detokenization occurs at output time)\n        dv: options.dv_value\n    };\n\n    if (options['response_time'] !== null && options.hasOwnProperty(\"response_time\")){\n        response['response_time'] = options['response_time'];     // Add response time.\n    }\n\n    _responses.push(response);\n\n    console.log(\"Stored response:\", _responses.back());\n}\n\nexport function _FormatStoredResponses(responses) {\n\n    console.log(responses);\n\n    /**\n     * GOAL: only tokenize & de-tokenize ONCE\n     *\n     * Trials\n     *      - Tokenuzed on creation\n     *      - DeTokenized on trial (deep copy)\n     *      - Nothing on Save               - Still tokenized from creation\n     *      - Nothing on Load               - DeTokenized as normal\n     *\n     * Responses\n     *      - DeTokenised on creation       - Receivng the detokenised trial\n     *            - ALT = store Tokenized trials & DeTokenize on output\n     *            - Nothing on Save - still a token\n     *            - Nothign on load - still a token\n     *\n     * Result\n     *      - Store all run trials + their DV response in tokenised form as the Response array\n     *      - On output, de-tokenize them & pass them to this method to be converted into a csv friendly format\n     * */\n\n    var formatted_responses = [], lastTrial;\n\n    for (var resp_idx = 0; resp_idx < responses.length; resp_idx++){\n\n        lastTrial = responses[resp_idx].trial.map(function( iv_obj_in_tokenised_format ){       // DeTokenise the saved responses\n            return _Unserializable_Token2Var(iv_obj_in_tokenised_format, true);                 // 2nd arg = DO detokenize the parser func\n        });\n\n        var responseFormatted = {};\n\n        // --- By this point, the responses no longer have tokens ---\n\n        /** [ Store the IV ] -> Write out each IV (1 IV per array element) to a field */\n        for (var i = 0; i < lastTrial.length; ++i) {\n\n            console.log(\"Formatting a response:\", k, i);\n\n            var ivNum = \"IV\" + i;\n\n            // [ RESPONSE PARSER ]\n            if (lastTrial[i].parserFunc !== undefined && typeof lastTrial[i].parserFunc === \"function\"){\n\n                var stdName = ivNum + \"_\" + lastTrial[i].description;\n\n                /**\n                 * Parser function interface:\n                 *                  function ( args_passed_to_this_IV_for_this_trial..., index) {}\n                 *                  return\n                 *                          string -    processed version of the data\n                 *                          object -    values are the processed version of parts of the data,\n                 *                                      keys are names given to each portion of the parsed data\n                 * */\n\n                var parsed_data = lastTrial[i].parserFunc.apply(this, lastTrial[i].value.concat(i) );                               // Refer to interface description above\n\n                if (typeof parsed_data === \"string\" || parsed_data instanceof String){\n                    responseFormatted[ stdName+\"_value\" ] = parsed_data;                                                            // Add parsed IV data to response\n\n                } else if (parsed_data !== null && typeof parsed_data === \"object\"){\n\n                    // TODO: See if keys output by the parser function can be cached for a performance improvement\n                    var keys = Object.keys(parsed_data);\n                    for (var k = 0; k < keys.length; k++){\n                        var key_and_data_description = keys[k];\n                        responseFormatted[ stdName+\"_\"+key_and_data_description ] = parsed_data[key_and_data_description]; // Add parsed data for this key to response\n                    }\n\n                } else {\n                    throw new Error(\"[ Parser Function Error ] - Parser function for \"+stdName+\" must output either a string or an object. You output:\", typeof parsed_data);\n                }\n\n                // [ DEFAULT: ARRAY OF INPUT ]\n            } else if (lastTrial[i].value.constructor === Array) { // Default behaviour: array of args passed to the IV's set function\n\n                /** Manually write out each argument (from an array) to a field in the object\n                 *  Only append a number if there are >1 arguments passed in */\n\n                if (lastTrial[i].value.length > 1){\n\n                    //If using a setFunc function with multiple args -> use the arg names to describe the values written to the response\n                    var arg_names, arg_name;\n                    arg_names = getParamNames( setFuncs[ lastTrial[i].description ] );\n\n                    for (var j = 0; j < lastTrial[i].value.length; ++j) {\n                        arg_name = arg_names[j];\n                        responseFormatted[ivNum + \"_\" + lastTrial[i].description + \"_\" + arg_name ] =  lastTrial[i].value[j];\n                    }\n\n                } else {\n                    responseFormatted[ ivNum + \"_\" + lastTrial[i].description ] =  lastTrial[i].value[0];\n                }\n\n            } else {\n                // TODO: Determine if this can be deleted...\n                responseFormatted[ivNum + \"_\" + lastTrial[i].description ] = lastTrial[i].value;\n            }\n\n        }\n\n        /** [ Store the DV ] */\n        var value = _dvName || \"value\";\n        responseFormatted[\"DV_\"+value] = responses[resp_idx].dv;\n\n        /** [ Store response time ] */\n        if (responses[resp_idx].response_time !== undefined){\n            responseFormatted[\"response_time_ms\"] = Number(responses[resp_idx].response_time.toFixed(5));\n        }\n\n        console.log(\"FORMATTED THIS RESPONSE: \", responseFormatted);\n\n        formatted_responses.push(responseFormatted);                         // _responses by one\n\n    }\n\n    return formatted_responses;\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/ResponseHandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "_responses",
    "memberof": "src/core/ResponseHandler.js",
    "static": true,
    "longname": "src/core/ResponseHandler.js~_responses",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponseHandler.js",
    "importStyle": "{_responses}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "_setResponses",
    "memberof": "src/core/ResponseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponseHandler.js~_setResponses",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponseHandler.js",
    "importStyle": "{_setResponses}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "responses",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "_storeResponse",
    "memberof": "src/core/ResponseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponseHandler.js~_storeResponse",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponseHandler.js",
    "importStyle": "{_storeResponse}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "_FormatStoredResponses",
    "memberof": "src/core/ResponseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponseHandler.js~_FormatStoredResponses",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponseHandler.js",
    "importStyle": "{_FormatStoredResponses}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "responses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/core/ResponsesOutput.js",
    "content": "\nimport { Trials } from \"./Trials.js\";\nimport { _responses } from \"./ResponseHandler.js\";\nimport { _pptName, _pptNo } from \"./GetPptInfo.js\";\nimport { createDownloadLink } from \"../utils/CreateDownloadLink.js\";\nimport { _FormatStoredResponses } from \"./ResponseHandler.js\";\n\nvar _ = require(\"lodash\");                                                            // Browserify will resolve this package\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                 Experiment Lifecycle - Output Responses\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n/**\n * Download participant's responses as a csv\n */\nTrials.forceOutputResponses = function(){\n    console.log(\"Forcing output of _responses\");\n    Trials.OutputResponses(_outputResponses(_responses, true));\n};\n\n\nexport function _outputResponses(allResponses, log) {\n\n    if (allResponses.length === 0) return;\n\n    allResponses = _FormatStoredResponses( _.cloneDeep(allResponses) );\n\n    return _formatAllResponsesToCSV(allResponses); // need to decide what to do HERE\n\n    // _createCSVLinkAndDownload(csvContent);\n\n}\n\nexport function _formatAllResponsesToCSV(allResponses, log = false){\n\n    var csvString = \"\";\n\n    var keys = Object.keys(allResponses[0]);            // These are all the columns in the output\n\n    csvString += \"Participant Name, Participant Number, \"; // Add ppt info to header\n    for (var i = 0; i < keys.length; i++) {\n        csvString += keys[i] + \",\";\n    }\n    csvString = csvString.slice(0, -1) + \"\\n\";          // Cut trailing comma and put in a new row/line\n\n    /** Fill the data - This time its an array of arrays not array of dictionaries */\n    for (i = 0; i < allResponses.length; i++) {\n\n        csvString += _pptName + \",\" + _pptNo + \",\";     // Manaully add content\n\n        for (var j = 0; j < keys.length; j++) {         // Iterate over the keys to get teh values\n            var value = allResponses[i][keys[j]];\n            csvString += value + \",\";\n        }\n\n        csvString = csvString.slice(0, -1) + \"\\n\"; //Cut trailing comma and put in a new row/line\n    }\n\n    if (log) console.log(csvString);\n        \n    return encodeURI(\"data:text/csv;charset=utf-8,\" + csvString);\n}\n\nexport function _createCSVLinkAndDownload(csvContent){\n    var a = createDownloadLink(\"results (\" + _pptName + \",\" + _pptNo.toString() + \").csv\", csvContent);\n    a.innerHTML = \"<h4>Click to download results!</h4>\";\n    a.className += \" results-download\";\n    document.body.appendChild(a);\n    a.click();\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/ResponsesOutput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "_",
    "memberof": "src/core/ResponsesOutput.js",
    "static": true,
    "longname": "src/core/ResponsesOutput.js~_",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/ResponsesOutput.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "forceOutputResponses",
    "memberof": "src/core/ResponsesOutput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponsesOutput.js~forceOutputResponses",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/ResponsesOutput.js",
    "importStyle": null,
    "description": "Download participant's responses as a csv",
    "lineNumber": 16,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "_outputResponses",
    "memberof": "src/core/ResponsesOutput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponsesOutput.js~_outputResponses",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponsesOutput.js",
    "importStyle": "{_outputResponses}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "allResponses",
        "types": [
          "*"
        ]
      },
      {
        "name": "log",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "_formatAllResponsesToCSV",
    "memberof": "src/core/ResponsesOutput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponsesOutput.js~_formatAllResponsesToCSV",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponsesOutput.js",
    "importStyle": "{_formatAllResponsesToCSV}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "allResponses",
        "types": [
          "*"
        ]
      },
      {
        "name": "log",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "_createCSVLinkAndDownload",
    "memberof": "src/core/ResponsesOutput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/ResponsesOutput.js~_createCSVLinkAndDownload",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/ResponsesOutput.js",
    "importStyle": "{_createCSVLinkAndDownload}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "csvContent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/core/RunExperiment.js",
    "content": "\n// RunExperiment.js\n// Adds core functionality facilitating the experimental life cycle to the Trials Object.\n// Specifically:\n//      - Getting participant info\n//      - Running the next trial (setting IVs etc)\n//      - Storing a response\n//      - Outputting responses\n//      - Mid/end callbacks\n\nimport { Trials, setFuncs, _allTrials, _didBuildTrials, _dvName, _isUsingPhases  } from \"./Trials.js\";\n\nimport { _storeResponse, _FormatStoredResponses, _responses } from \"./ResponseHandler.js\";\nimport { _outputResponses, _createCSVLinkAndDownload } from \"./ResponsesOutput.js\";\nimport { _interstimulusPause, _shouldInterstimulusPause } from \"./InterstimulusPause.js\";\nimport { getParamNames } from \"../utils/StringUtils.js\";\nimport { _ApplyFunctionToHTMLChildren } from \"../utils/DOMUtils.js\";\nimport { _Unserializable_Token2Var } from \"./UnserializableMap.js\";\nimport { _ErrorIfDidStartExperiment } from \"./../errors/ErrorIfDidStartExperiment.js\";\n\nvar _ = require(\"lodash\");                                                            // Browserify will resolve this package\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                         Experiment Lifecycle - Start & Game Loop\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n//Cannot reassign imported values, so you need a setter (used in InterstimlusPause.js)\nexport function _setShouldRunNextTrial(value){\n    if (typeof(value) === \"boolean\"){\n        _shouldRunNextTrial = value;\n    } else {\n        throw new Error(\"cannot set _shouldRunNextTrial to a non boolean value\");\n    }\n}\n\nexport var _shouldRunNextTrial = true;                                      // used by: InterstimulusPause.js\nexport var _didStartExperiment = false;\n\n/**\n * Call Trials.runNextTrial both to start the experiment and to progress to the next trial.\n * To store participant's response, an object should be passed in as the first arg.\n * This object should contain the key \"dv_value\", with its value being the participant's response\n * to the trial that was just run.\n *\n * Example:\n *      ExperimentJS.Trials.runNextTrial({ dv_value: \"left\" });\n *      \n * @param {object} options - must contain field \"dv_value\"\n */\nTrials.runNextTrial = function (options) {                                 // usage -> runNextTrial({shouldStoreResponse: true, dv_value: \"inside\"});\n\n    _trackResponseTimeEnd();\n\n    if (!_didBuildTrials){\n        throw new Error(\"runNextTrial(): Trial were not built\");\n    }\n\n    if (!_didStartExperiment) _didStartExperiment = true;\n\n    if (_shouldRunNextTrial) {\n\n        if (_shouldRunStartCallback() && typeof  _startCallback === \"function\"){\n            _startCallback();\n        }\n\n        if (_shouldRunMidCallback() && typeof _midCallback === \"function\") {\n            _midCallback();\n        }\n\n        if (options !== undefined && options.hasOwnProperty(\"dv_value\") ) {\n\n            options['response_time'] = _getResponseTimeDelta();\n            \n            _storeResponse(options);                                    // options must contain a field \"dv_value\". This is read by _storeResponse\n        }\n\n        if (_allTrials.length > 0) {\n\n            console.log(\"There are \", _allTrials.length, \" trials remaining.\");\n\n            if (_shouldInterstimulusPause) {\n                _interstimulusPause().then(function(){\n                    _displayNextTrial();\n                    _trackResponseTimeStart();\n                });\n            } else {\n                _displayNextTrial();\n                _trackResponseTimeStart();\n            }\n            \n\n\n        } else {\n\n            Trials.OutputResponses(_outputResponses(_responses));\n\n            if ( typeof _endCallBack === \"function\") _endCallBack();\n        }\n    }\n};\n\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                        Experiment Lifecycle - Displaying The Next Trial\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n/** Where view-level elements are set - this is like the CONTROLLER method interfacing between MODEL and VIEW*/\nfunction _displayNextTrial() {\n\n    // Deep copy the trial before you replace its tokens.\n    // This is because the tokens themselves are just references thus,\n    // detokenizing a reference will also detokenize trials elsewhere in _allTrials !!\n    var  _trial_to_run = _detokenizeTrial(_.cloneDeep( _allTrials.back() ));                // Trial is popped in ./ResponseHandler.js:_storeResponse\n\n    console.log(\"Displaying next trial:\", _trial_to_run);\n\n    if (!_isUsingPhases){\n        _displayTrialSimultaneously(_trial_to_run);\n    } else {\n        _displayTrialPhases(_trial_to_run);\n    }\n\n}\n\nfunction _detokenizeTrial(_trial_to_run){\n    return _trial_to_run.map(function(_tokenised_trial){\n        return _Unserializable_Token2Var(_tokenised_trial);\n    });\n}\n\nfunction _displayTrialSimultaneously(_trial_to_run){\n    /** Iterate over each IV and set its pointer to its value for that trial */\n    for (var i = 0; i < _trial_to_run.length; ++i) {\n        console.log(\"Now displaying Unserialized IV\", _trial_to_run[i]);\n        _fireIVSetFuncWithArgs(_trial_to_run[i]);\n    }\n}\n\nfunction _displayTrialPhases(_trial_to_run){\n\n    var promise_array = [];\n\n    Trials.Phases.map(function( current_phase, i ){                                 // Iterate over phases\n\n        var phase_promise = function() {\n            return new Promise(function (resolve, reject) {                        // Build promises chain of phases\n\n                current_phase.phase_ivs.map(function (iv_description) {             // Iterate over IVs named in phase\n\n                    _trial_to_run.map(function (iv_trial) {                         // Find those IVs in the trial array\n                        if (iv_trial.description === iv_description) {\n                            _fireIVSetFuncWithArgs(iv_trial);                           // Show them\n                        }\n                    });\n                });\n\n                if (current_phase.phase_transition_function !== undefined) {             // Set in ./Trials.s:Trials.setIvPhases()\n                    current_phase.phase_transition_function(resolve);                   // Transition function must call resolve\n                } else if (current_phase.phase_transition_delay !== undefined) {\n                    setTimeout(function () {\n                        resolve();                                                      // Resolve after delay\n                    }, current_phase.phase_transition_delay);\n                }\n            });\n        };\n\n        promise_array.push(phase_promise);\n\n    });\n\n    promise_array.reduce((p, f) => p.then(f), Promise.resolve());                   // Run array of promises in a chain\n}\n\nfunction _fireIVSetFuncWithArgs(cur_iv) {\n\n    /** Using a FUNCTION to set the display*/\n    if ( setFuncs[cur_iv.description] !== undefined ) {\n        setFuncs[cur_iv.description].apply(null, cur_iv.value);\n    } else {\n        throw new Error(\"No setter function supplied by: \" + cur_iv);\n    }\n}\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                            Experiment Life Cycle - Tracking Response Time\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//\nvar _should_track_response_time = false;\n\nTrials.setShouldTrackResponseTime = function(shouldTrackResponseTime){\n\n    if (typeof window.performance === 'undefined' || typeof window.performance.now === 'undefined'){\n        throw new Error(\"Response timing is not supported by your browser.\");\n    }\n\n    _ErrorIfDidStartExperiment();\n\n    if (typeof(shouldTrackResponseTime) === \"boolean\"){\n        _should_track_response_time = shouldTrackResponseTime;\n    } else {\n        throw new Error(\"[setShouldTrackResponseTime Error] - usage 1st argument should be a booolean\");\n    }\n};\n\n// Performance.now() = floating point milliseconds since page load\n// Accurate to 5 microseconds\nvar _response_start_time = null;\nvar _response_end_time = null;\nexport function _trackResponseTimeStart(){\n    if (_should_track_response_time)  _response_start_time = window.performance.now();\n}\nexport function _trackResponseTimeEnd(){\n    if (_should_track_response_time)  _response_end_time = window.performance.now();\n}\nexport function _getResponseTimeDelta(){\n    if (_should_track_response_time){\n        return _response_end_time - _response_start_time;\n    } else {\n        return null;\n    }\n}\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                  Experiment Lifecycle - Star Point Callback (i.e. the \"instructions\" message)\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nvar _startCallback = null;\n/**\n * Set a callback to be run at the start of the experiment.\n * @param {function} start_callback\n */\nTrials.setStartCallback = function (start_callback) {\n\n    _ErrorIfDidStartExperiment();\n\n    if (typeof start_callback === \"function\"){\n        _startCallback = start_callback;\n    }   else {\n        throw new Error(\"[ setStartCallback ERROR ] - First argument to setStartCallback must be a function\");\n    }\n};\n\nvar _didRunStartCallback = false;\nfunction _shouldRunStartCallback() {\n    if (_didRunMidCallback) return false;\n\n    // As trials are popped, responses are pushed.\n    // Mid point = there are as many responses as trials (or a difference of one for odd number of trials)\n    if (_responses.length === 0 ){\n        _didRunStartCallback = true;\n        return true;\n    }\n}\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                  Experiment Lifecycle - Mid Point Callback (i.e. the \"take a break\" message)\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\nvar _midCallback = null;\n/**\n * Set a callback to be run at the midpoint of the experiment\n * @param fn\n */\nTrials.setMidpointCallback = function (fn) {\n\n    _ErrorIfDidStartExperiment();\n\n    if (typeof fn === \"function\"){\n        _midCallback = fn;\n    }   else {\n        throw new Error(\"[ setMidCallback ERROR ] - First argument to setMidCallback must be a function\");\n    }\n};\n\nvar _didRunMidCallback = false;\nfunction _shouldRunMidCallback() {\n    if (_didRunMidCallback) return false;\n\n    // As trials are popped, responses are pushed.\n    // Mid point = there are as many responses as trials (or a difference of one for odd number of trials)\n    if (_allTrials.length ===_responses.length || Math.abs(_allTrials.length -_responses.length) === 1){\n        _didRunMidCallback = true;\n        return true;\n    }\n}\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                          Experiment Lifecycle - Output responses\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n/**\n * Function to output URI encoded csv.\n * Can be re-assigned or overridden to provide additional\n * functionality (e.g. sending the CSV to a server).\n * Overriding this function must conform to the interface.\n * @param {string} uri_csv_string\n */\nTrials.OutputResponses = function(uri_csv_string){\n    _createCSVLinkAndDownload(uri_csv_string);\n};\n\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//             Experiment Lifecycle - End Callback (a behaviour at the end of the experiment)\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nvar _endCallBack = function(){                                                  // Default behaviour is to empty the DOM\n    _ApplyFunctionToHTMLChildren(document.body, function(child){\n        child.style.display = \"none\";\n    });\n};\n\n/**\n * Set a callback to be run at the end of the experiment, after responses are output.\n * @param {function} end_callback\n */\nTrials.setEndCallback = function (end_callback) {\n    if (typeof end_callback === \"function\"){\n        _endCallBack = end_callback;\n    }   else {\n        throw new Error(\"[ setEndCallback ERROR ] - First argument to setEndCallback must be a function\");\n    }\n};\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/RunExperiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "_",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "_setShouldRunNextTrial",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_setShouldRunNextTrial",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_setShouldRunNextTrial}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "_shouldRunNextTrial",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_shouldRunNextTrial",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_shouldRunNextTrial}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "_didStartExperiment",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_didStartExperiment",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_didStartExperiment}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "runNextTrial",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~runNextTrial",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Call Trials.runNextTrial both to start the experiment and to progress to the next trial.\nTo store participant's response, an object should be passed in as the first arg.\nThis object should contain the key \"dv_value\", with its value being the participant's response\nto the trial that was just run.\n\nExample:\n     ExperimentJS.Trials.runNextTrial({ dv_value: \"left\" });\n     ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "must contain field \"dv_value\""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "_displayNextTrial",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_displayNextTrial",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Where view-level elements are set - this is like the CONTROLLER method interfacing between MODEL and VIEW",
    "lineNumber": 109,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "_detokenizeTrial",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_detokenizeTrial",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "_trial_to_run",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "_displayTrialSimultaneously",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_displayTrialSimultaneously",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "_trial_to_run",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "_displayTrialPhases",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_displayTrialPhases",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "_trial_to_run",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "_fireIVSetFuncWithArgs",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_fireIVSetFuncWithArgs",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "cur_iv",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "_should_track_response_time",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_should_track_response_time",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "setShouldTrackResponseTime",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~setShouldTrackResponseTime",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "shouldTrackResponseTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "_response_start_time",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_response_start_time",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "_response_end_time",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_response_end_time",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "_trackResponseTimeStart",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_trackResponseTimeStart",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_trackResponseTimeStart}",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "_trackResponseTimeEnd",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_trackResponseTimeEnd",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_trackResponseTimeEnd}",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "_getResponseTimeDelta",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_getResponseTimeDelta",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": "{_getResponseTimeDelta}",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "_startCallback",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_startCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "setStartCallback",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~setStartCallback",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Set a callback to be run at the start of the experiment.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "start_callback",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "_didRunStartCallback",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_didRunStartCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "_shouldRunStartCallback",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_shouldRunStartCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "_midCallback",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_midCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "setMidpointCallback",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~setMidpointCallback",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Set a callback to be run at the midpoint of the experiment",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "_didRunMidCallback",
    "memberof": "src/core/RunExperiment.js",
    "static": true,
    "longname": "src/core/RunExperiment.js~_didRunMidCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "_shouldRunMidCallback",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_shouldRunMidCallback",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "OutputResponses",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~OutputResponses",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Function to output URI encoded csv.\nCan be re-assigned or overridden to provide additional\nfunctionality (e.g. sending the CSV to a server).\nOverriding this function must conform to the interface.",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uri_csv_string",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "_endCallBack",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~_endCallBack",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "setEndCallback",
    "memberof": "src/core/RunExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/RunExperiment.js~setEndCallback",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/RunExperiment.js",
    "importStyle": null,
    "description": "Set a callback to be run at the end of the experiment, after responses are output.",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "end_callback",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/core/Saves.js",
    "content": "/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n *\n *   Store repsonses in localStorage.\n *   Localstorage converts everything to JSON, so object types that cannot be converted will be lost\n *   To preserve these unconvertble data, they are stored in a map,\n *   and are replaced with tokens in the array of trials.\n *   When trials are built: replaced serializable data with a serializable token (i.e. an indexed string)\n *   When Trials are run & formatted into response data: replace the token with the relevant object/function\n *\n *  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */\n\n\nimport { Trials,_allTrials, _setAllTrials, _didBuildTrials} from \"./Trials.js\";\nimport { _responses, _setResponses } from \"./ResponseHandler.js\";\nimport { SetCSSOnElement } from \"../utils/SetCSSOnElement.js\";\nimport { DOM_remove } from \"../utils/DOMUtils.js\";\n\nvar Saves = {};\n\n/**\n * Clear the saves stored in local storage.\n */\nSaves.clearSaves = function(){\n    localStorage.removeItem(\"experimentJSsaves\");\n};\n\n/**\n * Save the remaining trials and stored responses in local storage.\n */\nSaves.saveBuiltTrialsAndResponses = function() {\n\n    if (typeof(Storage) !== \"undefined\") {\n\n        var experimentJSsaves = {};\n        experimentJSsaves[\"trials\"] = _allTrials;                                           // Safely tokenized\n        experimentJSsaves[\"responses\"] = _responses;\n\n        var msg = prompt(\"Add a message to this save!\");\n\n        if (msg === null){\n            alert(\"Trials will not be saved\");\n            return;\n        }\n\n        var dateKey = (new Date()).toUTCString(); //Very clear date\n\n        var saves_keyed_by_dates = (localStorage.experimentJSsaves === undefined) ? {} : JSON.parse(localStorage.experimentJSsaves);\n\n        saves_keyed_by_dates[msg + \" - \" +dateKey] = experimentJSsaves;                       //save to it\n\n        localStorage.experimentJSsaves = JSON.stringify(saves_keyed_by_dates);                //serialize!\n\n        console.log(\"Saved Trials\", JSON.parse(localStorage.experimentJSsaves));\n    }\n};\n\n/**\n * Load the saved trials from local storage.\n */\nSaves.loadSavedTrialsAndResponses = function(){\n\n    if (document.getElementById(saves_dialog_id) !== null) return;                      // Dont display dialog if its already in the DOM\n\n    var experimentJSsaves = JSON.parse(localStorage.experimentJSsaves);\n\n    console.log(\"all saves: \", experimentJSsaves);\n\n    var select_dropdown_components = _createDropDownSelect(experimentJSsaves);          // Display the saves in a dropdown select\n\n    select_dropdown_components.button.addEventListener(\"click\", function(){            // TODO reimplement as a js onClick event handler\n\n        // var saves_from_seleced_date = select_dropdown_components.select.find(\":selected\").text();\n        var select = select_dropdown_components.select;\n        var saves_from_seleced_date = select.options[select.selectedIndex].text;\n\n        saves_from_seleced_date = experimentJSsaves[saves_from_seleced_date];\n\n        _setAllTrials( saves_from_seleced_date[\"trials\"] );                                             // Unparse your trials using custom unserialiser\n        _setResponses( saves_from_seleced_date[\"responses\"] );\n        if (_responses === undefined || _responses === null) _setResponses( [] );\n\n        console.log(\"restored trials: \", _allTrials);\n        console.log(\"restored responses: \", _responses);\n\n        Trials.runNextTrial();\n\n        DOM_remove(select_dropdown_components.wrap);\n        // select_dropdown_components.wrap.parentNode.removeChild(select_dropdown_components.wrap);        //Remove select from dom\n    });\n\n    select_dropdown_components.button_clear.addEventListener(\"click\", function(){\n\n        if (window.confirm(\"Are you sure you want to delete all saved experiments?\")){\n            Saves.clearSaves();\n        }\n\n        DOM_remove(select_dropdown_components.wrap);\n        // select_dropdown_components.wrap.parentNode.removeChild(select_dropdown_components.wrap);         //Remove select from DOM\n    });\n\n    select_dropdown_components.button_cancel.addEventListener(\"click\", function(){\n        DOM_remove(select_dropdown_components.wrap);\n        // select_dropdown_components.wrap.parentNode.removeChild(select_dropdown_components.wrap);\n    });\n\n\n};\n\n// Remove this functionality if Storage isnt supported\nif (typeof(Storage) === \"undefined\"){\n    var localStorageIsUnsupported = function(){alert(\"Your browser does not support local storage or experiment result saving\")};\n    Saves.loadSavedTrialsAndResponses = Saves.saveBuiltTrialsAndResponses = localStorageIsUnsupported;\n}\n\n\n\n// TODO: Verify that no jQuery is being used!\nconst saves_dialog_id = \"ExperimentJS_Saved_Info\";\nfunction _createDropDownSelect(all_saves){\n\n    var saves_dialog_wrap = document.createElement(\"saves_dialog_wrap\");\n    saves_dialog_wrap.id = saves_dialog_id;\n\n    //Make a select to choose from the saves\n    var sel = document.createElement(\"select\");\n\n    Object.keys(all_saves).map(function(elem, i, all){\n\n        var option = document.createElement(\"option\");\n        option.value = i;                                           // Use the all_saves index as the key\n        option.text = elem;\n        sel.appendChild(option);\n        // sel.append($(\"<option>\").attr(\"value\",i).text(elem));\n    });\n\n\n    // Buttons - no functionality here\n    var b = document.createElement(\"button\");\n    b.innerHTML = \"Choose\";\n\n    var b_clear = document.createElement(\"button\");\n    b_clear.innerHTML = \"Clear\";\n\n    var b_cancel = document.createElement(\"button\");\n    b_cancel.innerHTML = \"Cancel\";\n\n\n    [sel, document.createElement(\"br\"), b, b_clear, b_cancel].map(function(elem){\n        saves_dialog_wrap.appendChild(elem);\n    });\n    document.body.appendChild(saves_dialog_wrap);\n\n    var css = {\n        position: \"fixed\",\n        top: \"45vh\",\n        left: \"25vw\",\n        width: \"50vw\",\n        height: \"5vh\",\n        background: \"white\",\n        border: \"2vw\",\n        \"text-align\": \"center\"\n    };\n    SetCSSOnElement(saves_dialog_wrap, css);\n\n\n    return {\n        select: sel,\n        button: b,\n        button_clear: b_clear,\n        button_cancel: b_cancel,\n        wrap: saves_dialog_wrap\n    };\n}\n\n\nexport { Saves };",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/Saves.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "clearSaves",
    "memberof": "src/core/Saves.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Saves.js~clearSaves",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": null,
    "description": "Clear the saves stored in local storage.",
    "lineNumber": 23,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "saveBuiltTrialsAndResponses",
    "memberof": "src/core/Saves.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Saves.js~saveBuiltTrialsAndResponses",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": null,
    "description": "Save the remaining trials and stored responses in local storage.",
    "lineNumber": 30,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "loadSavedTrialsAndResponses",
    "memberof": "src/core/Saves.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Saves.js~loadSavedTrialsAndResponses",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": null,
    "description": "Load the saved trials from local storage.",
    "lineNumber": 60,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "saves_dialog_id",
    "memberof": "src/core/Saves.js",
    "static": true,
    "longname": "src/core/Saves.js~saves_dialog_id",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "_createDropDownSelect",
    "memberof": "src/core/Saves.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Saves.js~_createDropDownSelect",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "all_saves",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"select\": *, \"button\": *, \"button_clear\": *, \"button_cancel\": *, \"wrap\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "Saves",
    "memberof": "src/core/Saves.js",
    "static": true,
    "longname": "src/core/Saves.js~Saves",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/core/Saves.js",
    "importStyle": "{Saves}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/core/Trials.js",
    "content": "import * as NumUtils from \"../utils/NumberUtils\";\nimport { _Unserializable_Var2Token, _Unserializable_ParserFunc2Token } from \"./UnserializableMap.js\";\nimport { _ErrorIfTrialsAreBuilt } from \"./../errors/ErrorIfTrialsAreBuilt.js\";\nvar _ = require(\"lodash\");\n\n/**\n * To set Trial IVs\n *      1. Set the setter function:                 this is a function `fn` that will manipulate the display\n *      2. Set the args passed to the setter:       these are the varying args passed to `fn` used to vary the IV\n *      3. Call Trials.BuildExperiment()\n *\n *  Optional:\n *      4. Set a response parser function:          format passed arguments into a desired output format\n * */\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                 Trials - Setting IV Levels & Functions\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nvar Trials = {};\nexport var IVs = {};\nexport var setFuncs = {};\n\nvar _expRepeats = 1;\n\n/**\n * Generating every IV requires 2 steps: creating the levels and creating a set function.\n * setIVLevels sets the levels used by IV.\n * @param {string} ivname - The name of the IV.\n * @param {array} levels - Array of arrays of arguments passed to the set function.\n */\nTrials.setIVLevels = function ( ivname, levels) {\n\n    _ErrorIfTrialsAreBuilt();\n\n    if (Array.isArray(levels)){                                     // Enforce the type system: Levels must be an array of arrays\n\n        levels.map(function(elem, i){\n            if (!Array.isArray( elem )){\n                throw new Error(\"[ setIVLevels Error ] - Level \"+i+\" must be an array of args passed to the set function for \"+ ivname);\n            }\n        });\n\n        _setIVGeneric(ivname, \"levels\", levels);                    // Actually do the setting\n\n    } else{\n        throw new Error(\"[ setIVLevels Error ] - The second argument to setIVLevels must be an array of arrays, containing the arguments passsed to the set function for \"+ ivname);\n    }\n    \n};\n\n/**\n * Generating every IV requires 2 steps: creating the levels and creating a set function.\n * setIVsetFunc stores the function that is used to set those levels in the display.\n * The arguments that this function takes must correspond to the arguments assigned in Trials.setIVLevels.\n * @param {string} ivname - The name of the IV.\n * @param {function} setFunc - Function used to set levels in the display.\n */\nTrials.setIVsetFunc = function(ivname, setFunc) {\n\n    _ErrorIfTrialsAreBuilt();\n\n    if (typeof setFunc !== \"function\"){\n        throw new Error(\"[ setIVsetFunc Error ] - parser function for \"+ivname+\" was not a function\");\n    }\n\n    //This is now a flag to notify ExperimentJS that you\"re using functions\n    _setIVGeneric(ivname, \"setFunc\", true);\n\n    //Functions are now stored in their own map, keyed by ivname\n    _setSetFunc(ivname, setFunc);\n};\n\nexport var _dvName;\n/**\n * Set the name of the DV\n * @param {string} dvName\n */\nTrials.setDVName = function(dvName){\n    if (typeof dvName === \"string\"){\n        _csvIllegalCharCheck(dvName);\n        _dvName = dvName;\n    } else {\n        throw  new Error(\"The supplied DV name must be of type String\");\n    }\n};\n\n/**\n * Parser function interface:\n *                  function ( args_passed_to_this_IV_for_this_trial..., index) {}\n *                  return\n *                          string -    processed/formatted version of the data\n *                          object -    values are the processed version of parts of the data,\n *                                      keys are names given to each portion of the parsed data\n * @param {string} ivname - The name of the IV.\n * @param {function} parserFunc - Function to parse responses. Must conform to the interface above\n */\nTrials.setIVResponseParserFunc = function (ivname, parserFunc) {\n\n    _ErrorIfTrialsAreBuilt();\n\n    if (typeof parserFunc !== \"function\"){\n        throw new Error(\"[ setIVResponseParserFunc Error ] - parser function for \"+ivname+\" was not a function: \", typeof parserFunc);\n    }\n\n    _setIVGeneric(ivname, \"parserFunc\", parserFunc);\n};\n\n/**\n * Set the number of repeats in the experiment.\n * @param {int} nRepeats\n */\nTrials.setRepeats = function (nRepeats) {\n\n    _ErrorIfTrialsAreBuilt();\n\n    if (!Number.isInteger(nRepeats)){\n        throw new Error(\"[ setRepeats Error ] - 1st argument to this function must be an integer\");\n    }\n\n    _expRepeats = nRepeats;\n};\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                            Trials - Setting IV Levels & Functions (private)\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n/*\n * */\nexport function _setIVGeneric(ivName, fieldName, fieldVal) {\n    _csvIllegalCharCheck(ivName);\n    _csvIllegalCharCheck(fieldName);\n\n    if (!IVs.hasOwnProperty(ivName)) {                      // If IV doesn't exist yet, create it\n        IVs[ivName] = {};\n    }\n\n    IVs[ivName][fieldName] = fieldVal;\n}\n\n\nfunction _setSetFunc(ivname, setfunc){\n    setFuncs[ivname] = setfunc;\n}\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                      Trials - Phases\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nexport var _isUsingPhases = false;\nTrials.Phases = [];\n\n/**\n * Present IVs sequentially by assigning each IV name to an ordinally numbered phase.\n * To transition between phases, a function or a delay (in milliseconds) must be provided.\n * If a function is provided, its first argument is the callback that should be called\n * to transition to the next phase.\n * @param {int} phase_num - ordinal number of the phase\n * @param {array} array_of_iv_names - array of IV names for this phase\n * @param {function | number} transition_func_or_delay - function to handle transition between phases, or duration until next phase\n */\nTrials.setIVPhases = function(phase_num, array_of_iv_names, transition_func_or_delay = 0){\n\n    if (!NumUtils.isInt(phase_num) || phase_num < 0 || !Array.isArray(array_of_iv_names) || typeof array_of_iv_names[0] !== \"string\"\n        || (typeof transition_func_or_delay !== \"function\" && !NumUtils.isFloat(transition_func_or_delay) && !NumUtils.isInt(transition_func_or_delay))){\n        throw new Error(\"[ setIVPhases ERROR ] : Usage (int, array, function/int)\" );\n    }\n\n    _isUsingPhases = true;\n\n    /*\n    Confirm that:\n    1. The transition function conforms to the interface (receives a Promise resolve(), and calls it internally)\n            - call function.toString() & regex for a call to resolve()\n\n    2. The IV names are right\n     */\n    var current_iv_names = Object.keys(IVs);\n    array_of_iv_names.map(function(iv_name){                    // Confirm IV name exists\n        if (_.indexOf(current_iv_names, iv_name) == -1){\n            throw new Error (\"[ setIVPhases ERROR ] - iv name {0} in phase {1} has not been defined\".formatUnicorn(iv_name, phase_num));\n        }\n    });\n\n    var phase = { phase_ivs:  array_of_iv_names };\n\n    if (typeof transition_func_or_delay === \"function\"){                    // Used in ./RunExperiment.js:_displayTrialPhases()\n        phase['phase_transition_function'] = transition_func_or_delay;\n    } else {\n        phase['phase_transition_delay'] = transition_func_or_delay;\n    }\n\n    if (phase_num > Trials.Phases.length){\n        Trials.Phases.push(phase);\n    } else {\n        Trials.Phases.splice(phase_num, 0, phase);\n    }\n};\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                      Trials - Building\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n\nexport var _allTrials = [];\nvar _totalTrials = -1;                                          // Assigned but never used\nexport var _didBuildTrials = false;\n\nexport function _setAllTrials(alltrials){                       // Used in ./Saves.js. Has to live here as it redefines _allTrials\n    if (alltrials.constructor === Array){\n        _allTrials = alltrials;\n    }\n}\n\n/**\n * Returns a deep copy of the trials array\n * @returns {array} - a copy of the trials array\n */\nTrials.getTrials = function(){\n    if (_allTrials.length > 0){\n        return _.cloneDeep(_allTrials);\n    }\n};\n\n/**\n * BuildExperiment must be called to generate the trial array from the supplied IVs,\n * prior to running the experiment.\n * @param {bool} printTrials - flag to print the trials as they are built.\n */\nTrials.BuildExperiment = function (printTrials = false) {\n    if (typeof printTrials !== \"boolean\") {\n        throw new Error(\"[ buildExperiment ERROR ] - first arg to buildExperiment must be a boolean\");\n    } else if (_didBuildTrials){\n        throw new Error(\"[ buildExperiment ERROR ] - buildExperiment should only be called once!\");\n    } else {\n        _buildTrials( printTrials );\n    }\n};\n\nfunction _buildTrials(printTrials = false) {\n\n    console.log(\"Build Trials. IVS:\", IVs);\n\n    var buildingTrial, temp;\n\n    for (var iv in IVs) {                                                                       //Iterate over IVs\n\n        if (IVs[iv].levels === undefined)  throw new Error(\"Levels not supplied for \" + iv);\n        if (IVs[iv].setFunc === undefined) throw new Error(\"Setter function not supplied for \" + iv);   // TODO: two setfunc checks? this seems wrong\n\n        console.log(\"Extending all trials array with: \" + iv + \" (\" + IVs[iv].levels.length + \" levels)\");\n\n        // Serialise functions & objects stored in the map\n        var _tokenized_iv_levels = _Unserializable_Var2Token(IVs[iv].levels, iv);               // From UnserializableMap.js - replace unserializable object with token\n        var _tokenized_parser_func = _Unserializable_ParserFunc2Token(IVs[iv].parserFunc, iv);\n\n        if (setFuncs[iv] === undefined) throw new Error(\"SetFunc not defined for \" + iv);               // TODO: two setfunc checks? this seems wrong\n\n        temp = [];\n\n        var len = _allTrials.length === 0 ? 1 : _allTrials.length; // For the first pass\n\n        for (var i = 0; i < len; ++i) {                                                         // For all trials built so far\n\n            buildingTrial = _allTrials.pop();                                                   // Pop the incomplete array of iv-vals (objects) and extend it\n\n            for (var j = 0; j < _tokenized_iv_levels.length; ++j) {                             //Extend trials so far by all the levels of the next IV\n\n                var curIVLevel = {};\n\n                // = = = = = = = = = = = IV name and Args passed to setter = = = = = = = = = = = = = =\n\n                curIVLevel.description = iv;                                                    // Set the description of the current IV obj 4 the current Level\n                curIVLevel.value = _tokenized_iv_levels[j];                                     // Create a factorial combination of the current IV level\n\n                // = = = = = = = = = = = Parser Func = = = = = = = = = = = = = =\n\n                if (_tokenized_parser_func !== undefined) {                                     // Parser functions\n                    curIVLevel.parserFunc = _tokenized_parser_func;                             // Replaced with a string, keyed by IV name\n                }\n\n                // = = = = = = = = = = = Extending the trial = = = = = = = = = = = = = =\n\n                var newOrExtendedTrial;\n\n                if (buildingTrial === undefined) {\n                    newOrExtendedTrial = [ curIVLevel ];\n                } else if (buildingTrial.constructor === Array) {\n                    newOrExtendedTrial = buildingTrial.concat([ curIVLevel ]);                  // The incomplete trial is extended by creating a brand new array FROM it\n                }\n\n                temp.push(newOrExtendedTrial);\n            }\n        }\n\n        _allTrials = temp;                                                                      // Replace your previous trials with Temp (don\"t know who to do this in place)\n    }\n\n    temp = [];                                                                                  // Duplicate trials for repeats\n    for (i = 0; i < _expRepeats; i++) {\n        temp = temp.concat(_allTrials);\n    }\n    _allTrials = temp;\n\n    if (_shouldShuffle)    Trials.shuffleTrials( _allTrials );\n\n    _totalTrials = _allTrials.length; //Used to determine where you are in the trial process\n    _didBuildTrials = true;\n\n    // = = = = = = = = = = = debugging... = = = = = = = = = = = = = =\n\n    console.log(\"There are \", _allTrials.length, \"trials (using\", _expRepeats, \"_expRepeats)\");\n    if (printTrials){\n        console.log(_allTrials);\n        for (i = 0; i < _allTrials.length; i++){\n            console.log(\"TRIAL \", i);\n            for (j = 0; j < _allTrials[i].length; j++){\n                console.log( _allTrials[i][j], \"\\t==>\", _allTrials[i][j].value );\n            }\n            console.log(\"******* ******* ******* *******\");\n        }\n    }\n}\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                      Trials - Shuffling\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nvar _shouldShuffle = true;\n/**\n * Determine whether the trials should be shuffled.\n * @param {bool} - shouldShuffle\n */\nTrials.setShuffle = function(shouldShuffle){\n    if (typeof(shouldShuffle) === \"boolean\"){\n        _shouldShuffle =  shouldShuffle;\n    } else {\n        throw new Error(\"setShuffle only accepts boolean argument\");\n    }\n};\n\n/**\n * Shuffles trials using the Fisher Yates algorithm.\n * This function can be replaced with a custom shuffling function, as long as the interface is maintained.\n * Trials must be shuffled in place.\n * @param {array} - unshuffled trials\n */\nTrials.shuffleTrials = function(trials){\n\n    if (!Array.isArray(trials)){\n        throw new Error(\"Trial Shuffling Function Usage (array trials)\");\n    }\n\n    trials.shuffle();\n};\n\n\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//                                      Trials - sub functions\n// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nfunction _csvIllegalCharCheck(string){\n\n    if (typeof string !== \"string\"){\n        throw new Error(\"You must supply a variable of type String for this method\");\n    }\n\n    if (string.indexOf(\",\") !== -1){\n        throw new Error(\"Strings used by ExperimentJS may not contain commas: \" + string);\n    }\n}\n\nexport { Trials };",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/Trials.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "_",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "IVs",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~IVs",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{IVs}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "setFuncs",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~setFuncs",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{setFuncs}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "_expRepeats",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_expRepeats",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "setIVLevels",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setIVLevels",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Generating every IV requires 2 steps: creating the levels and creating a set function.\nsetIVLevels sets the levels used by IV.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ivname",
        "description": "The name of the IV."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "levels",
        "description": "Array of arrays of arguments passed to the set function."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "setIVsetFunc",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setIVsetFunc",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Generating every IV requires 2 steps: creating the levels and creating a set function.\nsetIVsetFunc stores the function that is used to set those levels in the display.\nThe arguments that this function takes must correspond to the arguments assigned in Trials.setIVLevels.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ivname",
        "description": "The name of the IV."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "setFunc",
        "description": "Function used to set levels in the display."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "setDVName",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setDVName",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Set the name of the DV",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dvName",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "setIVResponseParserFunc",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setIVResponseParserFunc",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Parser function interface:\n                 function ( args_passed_to_this_IV_for_this_trial..., index) {}\n                 return\n                         string -    processed/formatted version of the data\n                         object -    values are the processed version of parts of the data,\n                                     keys are names given to each portion of the parsed data",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ivname",
        "description": "The name of the IV."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "parserFunc",
        "description": "Function to parse responses. Must conform to the interface above"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "setRepeats",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setRepeats",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Set the number of repeats in the experiment.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "nRepeats",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "_setIVGeneric",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~_setIVGeneric",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{_setIVGeneric}",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "ivName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldVal",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "_setSetFunc",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~_setSetFunc",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "ivname",
        "types": [
          "*"
        ]
      },
      {
        "name": "setfunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "_isUsingPhases",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_isUsingPhases",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{_isUsingPhases}",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "setIVPhases",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setIVPhases",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Present IVs sequentially by assigning each IV name to an ordinally numbered phase.\nTo transition between phases, a function or a delay (in milliseconds) must be provided.\nIf a function is provided, its first argument is the callback that should be called\nto transition to the next phase.",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "phase_num",
        "description": "ordinal number of the phase"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "array_of_iv_names",
        "description": "array of IV names for this phase"
      },
      {
        "nullable": null,
        "types": [
          "function ",
          " number"
        ],
        "spread": false,
        "optional": false,
        "name": "transition_func_or_delay",
        "description": "function to handle transition between phases, or duration until next phase"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "_allTrials",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_allTrials",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{_allTrials}",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "_totalTrials",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_totalTrials",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "_didBuildTrials",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_didBuildTrials",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{_didBuildTrials}",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "_setAllTrials",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~_setAllTrials",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{_setAllTrials}",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "alltrials",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "getTrials",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~getTrials",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Returns a deep copy of the trials array",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} - a copy of the trials array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "a copy of the trials array"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "BuildExperiment",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~BuildExperiment",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "BuildExperiment must be called to generate the trial array from the supplied IVs,\nprior to running the experiment.",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "printTrials",
        "description": "flag to print the trials as they are built."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "_buildTrials",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~_buildTrials",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "printTrials",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "_shouldShuffle",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~_shouldShuffle",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "setShuffle",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~setShuffle",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Determine whether the trials should be shuffled.",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "shouldShuffle"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "shuffleTrials",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~shuffleTrials",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": "Shuffles trials using the Fisher Yates algorithm.\nThis function can be replaced with a custom shuffling function, as long as the interface is maintained.\nTrials must be shuffled in place.",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "unshuffled trials"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "_csvIllegalCharCheck",
    "memberof": "src/core/Trials.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/Trials.js~_csvIllegalCharCheck",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "Trials",
    "memberof": "src/core/Trials.js",
    "static": true,
    "longname": "src/core/Trials.js~Trials",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/core/Trials.js",
    "importStyle": "{Trials}",
    "description": "To set Trial IVs\n     1. Set the setter function:                 this is a function `fn` that will manipulate the display\n     2. Set the args passed to the setter:       these are the varying args passed to `fn` used to vary the IV\n     3. Call Trials.BuildExperiment()\n\n Optional:\n     4. Set a response parser function:          format passed arguments into a desired output format",
    "lineNumber": 20,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/core/UnserializableMap.js",
    "content": "/** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n *\n *   Store repsonses in localStorage.\n *   Localstorage converts everything to JSON, so object types that cannot be converted will be lost\n *   To preserve these unconvertble data, they are stored in a map,\n *   and are replaced with tokens in the array of trials.\n *   When trials are built: replaced serializable data with a serializable token (i.e. an indexed string)\n *   When Trials are run & formatted into response data: replace the token with the relevant object/function\n *\n *  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */\n\n//\nvar UnserializableMap = {};\nvar ParserFuncMap = {};\n\nconst unserializable_token = \"%%UNSERIALIZABLE%%\";\nconst unserializable_parserfunc_token = \"%%PARSERFUNC%%\";\n\n// ========================================================================================\n\nexport function _Unserializable_Token2Var(iv_for_trial, detokenize_parser = false){\n\n    if (!Array.isArray(iv_for_trial.value) || typeof iv_for_trial.description !== \"string\"){\n        throw new Error(\"_Unserializable_Token2Var ERROR - usage (object iv, bool detokenize_parser)\", iv_for_trial);\n    }\n\n    // TODO: short circuit this whole process with some flags if there is nothing to detokenize!!\n\n    // {description, value}\n\n    var __unserialise_key, __arg_value, __iv_args = iv_for_trial.value; // Should be an array\n\n    for (var i  = 0; i < __iv_args.length; i++) {\n\n        __arg_value = __iv_args[i];\n\n        if (typeof __arg_value === \"string\" && __arg_value.includes(unserializable_token)) {\n\n            console.log(\"FOUND A THING TO UNSERIALISE: \", __arg_value);\n            console.log(\"iv_for_trial\", iv_for_trial);\n\n            __unserialise_key = +__arg_value.replace(unserializable_token, \"\");\n\n            console.log(\"UnserializableMap\", UnserializableMap[iv_for_trial.description], \" ==>\", __unserialise_key);\n\n            iv_for_trial.value[i] = UnserializableMap[iv_for_trial.description][__unserialise_key];\n        }\n    }\n    \n    // TODO: Add support for parser funcs here\n    if (detokenize_parser && ParserFuncMap.hasOwnProperty(iv_for_trial.description)){\n        iv_for_trial.parserFunc = ParserFuncMap[iv_for_trial.description];\n    }\n\n    return iv_for_trial;\n}\n\n//  iv_arg_array_to_tokenize - array of arrays - arguments to be passed to the settter func\nexport function _Unserializable_Var2Token(iv_arg_array_to_tokenize, iv_name){\n\n    if (!Array.isArray(iv_arg_array_to_tokenize) || typeof iv_name !== \"string\"){\n        throw new Error(\"_Unserializable_Var2Token usage: (array iv_args, string iv_name)\");\n    }\n\n    var __ctr = 0;\n\n    // var iv_arg_array_to_tokenize = iv_arg_array_to_tokenize;                                     // TODO: Determine if a deep copy is required\n\n    for (var i = 0; i < iv_arg_array_to_tokenize.length; i++){\n\n        var __iv_args = iv_arg_array_to_tokenize[i];\n\n        for (var j = 0; j < __iv_args.length; j++){\n\n            var __val = __iv_args[j];\n            \n            if (typeof __val === \"function\" || typeof __val === \"object\" || Array.isArray(__val) ){\n                \n                if (UnserializableMap[iv_name] === undefined) UnserializableMap[iv_name] = {};\n\n                UnserializableMap[iv_name][__ctr.toString() ] = __val;               // Save the unserializable\n\n                iv_arg_array_to_tokenize[i][j] = __ctr + unserializable_token;            // Replace unserializable with token\n\n                __ctr++;\n\n            }\n        }\n    }\n\n    return iv_arg_array_to_tokenize;\n}\n\n// ParserFuncs are stored in the Saves object and will be lost when serialsied to JSON, so create a map of them\nexport function _Unserializable_ParserFunc2Token(parserfunc, iv_name){\n\n    if (parserfunc === undefined) return parserfunc;\n\n    if (typeof parserfunc !== \"function\" || typeof  iv_name !== \"string\"){\n        throw new Error(\"_Unserializable_ParserFunc2Token ERROR - usage (function parserfunc, string iv_name\");\n    }\n\n    ParserFuncMap[iv_name] = parserfunc;\n\n    return unserializable_parserfunc_token;\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/UnserializableMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "UnserializableMap",
    "memberof": "src/core/UnserializableMap.js",
    "static": true,
    "longname": "src/core/UnserializableMap.js~UnserializableMap",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": null,
    "description": "= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n  Store repsonses in localStorage.\n  Localstorage converts everything to JSON, so object types that cannot be converted will be lost\n  To preserve these unconvertble data, they are stored in a map,\n  and are replaced with tokens in the array of trials.\n  When trials are built: replaced serializable data with a serializable token (i.e. an indexed string)\n  When Trials are run & formatted into response data: replace the token with the relevant object/function\n\n = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =",
    "lineNumber": 13,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "ParserFuncMap",
    "memberof": "src/core/UnserializableMap.js",
    "static": true,
    "longname": "src/core/UnserializableMap.js~ParserFuncMap",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "unserializable_token",
    "memberof": "src/core/UnserializableMap.js",
    "static": true,
    "longname": "src/core/UnserializableMap.js~unserializable_token",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "unserializable_parserfunc_token",
    "memberof": "src/core/UnserializableMap.js",
    "static": true,
    "longname": "src/core/UnserializableMap.js~unserializable_parserfunc_token",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "_Unserializable_Token2Var",
    "memberof": "src/core/UnserializableMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/UnserializableMap.js~_Unserializable_Token2Var",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": "{_Unserializable_Token2Var}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "iv_for_trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "detokenize_parser",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "_Unserializable_Var2Token",
    "memberof": "src/core/UnserializableMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/UnserializableMap.js~_Unserializable_Var2Token",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": "{_Unserializable_Var2Token}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "iv_arg_array_to_tokenize",
        "types": [
          "*"
        ]
      },
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "_Unserializable_ParserFunc2Token",
    "memberof": "src/core/UnserializableMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/UnserializableMap.js~_Unserializable_ParserFunc2Token",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/core/UnserializableMap.js",
    "importStyle": "{_Unserializable_ParserFunc2Token}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "parserfunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/core/core.js",
    "content": "//Order of imports is important\n\n/* Import Trials and extend it with additional functionality*/\nimport { Trials } from  \"./Trials.js\"; //Needs ./ to treat it as an internal (not external dependency)\nimport \"./RunExperiment.js\";           // Extends the functionality of the Trials object\nimport \"./ResponsesOutput.js\";\nimport \"./GetPptInfo.js\";\n\nimport { Pause } from  \"./InterstimulusPause.js\";\nimport { Saves } from \"./Saves.js\";\n\n//These are the fields of ExperimentJS\nexport { Trials };\nexport { Pause };\nexport { Saves };",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/core/core.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/errors/ErrorIfDidStartExperiment.js",
    "content": "/**\n * Created by kai on 4/8/17.\n */\n\nimport { _didStartExperiment } from \"./../core/RunExperiment.js\";\n\nexport function _ErrorIfDidStartExperiment(){\n    if (_didStartExperiment){\n\n        var callerName;\n        try { throw new Error(); }\n        catch (e) {\n            var re = /(\\w+)@|at (\\w+) \\(/g, st = e.stack, m;\n            re.exec(st), m = re.exec(st);\n            callerName = m[1] || m[2];\n        }\n\n        // var funcname = arguments.callee.caller.toString();\n        throw new Error(\"[ \"+callerName+\" Error ] Experiment has already begun.\");\n    }\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/errors/ErrorIfDidStartExperiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "_ErrorIfDidStartExperiment",
    "memberof": "src/errors/ErrorIfDidStartExperiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/ErrorIfDidStartExperiment.js~_ErrorIfDidStartExperiment",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/errors/ErrorIfDidStartExperiment.js",
    "importStyle": "{_ErrorIfDidStartExperiment}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/errors/ErrorIfTrialsAreBuilt.js",
    "content": "/**\n * Created by kai on 4/8/17.\n */\n\nimport { _didBuildTrials } from \"./../core/Trials.js\";\n\nexport function _ErrorIfTrialsAreBuilt(){\n    if (_didBuildTrials){\n        \n        var callerName;\n        try { throw new Error(); }\n        catch (e) {\n            var re = /(\\w+)@|at (\\w+) \\(/g, st = e.stack, m;\n            re.exec(st), m = re.exec(st);\n            callerName = m[1] || m[2];\n        }\n\n        throw new Error(\"[ \"+callerName+\" Error ] Trials have already been built.\");\n    }\n}\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/errors/ErrorIfTrialsAreBuilt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "_ErrorIfTrialsAreBuilt",
    "memberof": "src/errors/ErrorIfTrialsAreBuilt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/ErrorIfTrialsAreBuilt.js~_ErrorIfTrialsAreBuilt",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/errors/ErrorIfTrialsAreBuilt.js",
    "importStyle": "{_ErrorIfTrialsAreBuilt}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/methods/2AFC.js",
    "content": "import { Trials } from \"../core/Trials.js\";\n\n\nvar _2AFC = {};\n\n/**\n * 2AFC Module.\n *\n * These are lightweight wrappers around the core Trials methods.\n * They enforce a 2AFC structure to the experiment\n *\n * */\n\n// ================================== Standard ==================================\n\nvar _didSetStandard = false;\n\n// Usage: (string, function, array of args)\n_2AFC.SetStandard = function(iv_name, std_func, std_func_args){\n\n    if (typeof iv_name !== \"string\" || typeof std_func !== \"function\" || !Array.isArray(std_func_args) ){\n        throw new Error(\"[ 2AFC SetStandard Error ] - usage = (string iv_name, function std_func, array std_func_args)\");\n    }\n\n    _didSetStandard = true;\n\n    iv_name = \"std_\"+iv_name;\n\n    Trials.setIVsetFunc(iv_name, std_func);\n    Trials.setIVLevels(iv_name, [ std_func_args ] );\n};\n\n// Usage: (string iv_name, function parser_func);\n_2AFC.SetStandardParserFunc = function(iv_name, parser_func){\n    Trials.setIVResponseParserFunc(\"std_\"+iv_name, parser_func);\n};\n\n// ================================== Varying ==================================\n\nvar _didSetVarying = false;\n// Usage: ( string, function, array of arrays (of args) )\n_2AFC.SetVarying = function(iv_name, varying_func, varying_func_levels){\n\n    if (typeof iv_name !== \"string\" || typeof varying_func !== \"function\" || !Array.isArray(varying_func_levels) || !Array.isArray(varying_func_levels[0]) ){\n        throw new Error(\"[ 2AFC SetVarying Error ] - usage = (string iv_name, function varying_func, array varying_func_levels)\");\n    }\n\n    _didSetVarying = true;\n\n\n    Trials.setIVsetFunc(iv_name, varying_func);\n    Trials.setIVLevels(iv_name, varying_func_levels);\n};\n\n// Usage: (string iv_name, function parser_func);\n_2AFC.SetVaryingParserFunc = Trials.setIVResponseParserFunc;\n\n// ================================== Counter Balancer ==================================\n\nvar _didSetCounterBalance = false;\n_2AFC.SetCounterBalancePresentation = function(iv_name, counterbalance_func, counterbalance_func_levels){\n\n    if (typeof iv_name !== \"string\" || typeof counterbalance_func !== \"function\" || !Array.isArray(counterbalance_func_levels) || !Array.isArray(counterbalance_func_levels[0]) ){\n        throw new Error(\"[ 2AFC CounterBalancePresentation Error ] - usage = (string iv_name, function varying_func, array varying_func_levels)\");\n    }\n\n    _didSetCounterBalance = true;\n\n    iv_name = \"counterbalance_\"+iv_name;\n\n    Trials.setIVsetFunc(iv_name, counterbalance_func);\n    Trials.setIVLevels(iv_name, counterbalance_func_levels);\n};\n\n// Usage: (string iv_name, function parser_func);\n_2AFC.SetCounterBalanceParserFunc = function(iv_name, parser_func){\n    Trials.setIVResponseParserFunc(\"counterbalance_\"+iv_name, parser_func);\n};\n\n_2AFC.BuildExperiment = function(print){\n\n    if ( !(_didSetCounterBalance && _didSetStandard && _didSetVarying) ){\n        throw new Error(\"[ 2AFC BuildExperiment Error ] - To run a 2AFC experiment a standard variable, varying variable and counterbalancer must be set\");\n    }\n\n    Trials.BuildExperiment(print);\n};\n\nexport { _2AFC }",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/methods/2AFC.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "_didSetStandard",
    "memberof": "src/methods/2AFC.js",
    "static": true,
    "longname": "src/methods/2AFC.js~_didSetStandard",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": "2AFC Module.\n\nThese are lightweight wrappers around the core Trials methods.\nThey enforce a 2AFC structure to the experiment",
    "lineNumber": 16,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "SetStandard",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~SetStandard",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "std_func",
        "types": [
          "*"
        ]
      },
      {
        "name": "std_func_args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "SetStandardParserFunc",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~SetStandardParserFunc",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "parser_func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "_didSetVarying",
    "memberof": "src/methods/2AFC.js",
    "static": true,
    "longname": "src/methods/2AFC.js~_didSetVarying",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "SetVarying",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~SetVarying",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "varying_func",
        "types": [
          "*"
        ]
      },
      {
        "name": "varying_func_levels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "_didSetCounterBalance",
    "memberof": "src/methods/2AFC.js",
    "static": true,
    "longname": "src/methods/2AFC.js~_didSetCounterBalance",
    "access": "private",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "SetCounterBalancePresentation",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~SetCounterBalancePresentation",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "counterbalance_func",
        "types": [
          "*"
        ]
      },
      {
        "name": "counterbalance_func_levels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "SetCounterBalanceParserFunc",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~SetCounterBalanceParserFunc",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "iv_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "parser_func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "BuildExperiment",
    "memberof": "src/methods/2AFC.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/methods/2AFC.js~BuildExperiment",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "print",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "_2AFC",
    "memberof": "src/methods/2AFC.js",
    "static": true,
    "longname": "src/methods/2AFC.js~_2AFC",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/methods/2AFC.js",
    "importStyle": "{_2AFC}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/methods/ConstantStimuli.js",
    "content": "/**\n * Created by kai on 19/7/17.\n */\nimport { Trials } from \"../core/Trials.js\";\n\n\nvar ConstantStimuli = {};\n\n\n\n\nexport { ConstantStimuli }",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/methods/ConstantStimuli.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "ConstantStimuli",
    "memberof": "src/methods/ConstantStimuli.js",
    "static": true,
    "longname": "src/methods/ConstantStimuli.js~ConstantStimuli",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/methods/ConstantStimuli.js",
    "importStyle": "{ConstantStimuli}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/methods/methods.js",
    "content": "/**\n * Created by kai on 17/7/17.\n */\nimport { Trials } from  \"../core/Trials.js\";\n\nimport { _2AFC } from \"./2AFC.js\";\nimport { ConstantStimuli } from \"./ConstantStimuli.js\";\n\nvar Methods = {\n    _2AFC: _2AFC,\n    ConstantStimuli: ConstantStimuli\n};\n\n// The fields of ExperimentJS\nexport { Methods } ",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/methods/methods.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "Methods",
    "memberof": "src/methods/methods.js",
    "static": true,
    "longname": "src/methods/methods.js~Methods",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/methods/methods.js",
    "importStyle": "{Methods}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"_2AFC\": *, \"ConstantStimuli\": *}"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/utils/CreateDownloadLink.js",
    "content": "export function createDownloadLink(filename, data){\n    ////http://stackoverflow.com/questions/17836273/export-javascript-data-to-csv-file-without-server-interaction\n    var a = document.createElement(\"a\");\n    a.href = data;\n    a.target = \"_blank\";\n    a.download = filename;\n \n    return a;\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/CreateDownloadLink.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "createDownloadLink",
    "memberof": "src/utils/CreateDownloadLink.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CreateDownloadLink.js~createDownloadLink",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/CreateDownloadLink.js",
    "importStyle": "{createDownloadLink}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/utils/DOMUtils.js",
    "content": "/**\n * Created by kai on 6/7/17.\n */\n\n\nexport function _ApplyFunctionToHTMLChildren(elem, func){\n\n    if (elem.children === undefined || typeof func !== \"function\" ){\n        throw new Error(\"_ApplyFunctionToChildren accepts args (html_element, func)\");\n    }\n\n    for (var i = 0 ; i < elem.children.length; i++){\n        func(elem.children[i]);\n    }\n}\n\n\nexport function DOM_remove(elem){\n    elem.parentNode.removeChild(elem);        //Remove select from dom\n}",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/DOMUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "_ApplyFunctionToHTMLChildren",
    "memberof": "src/utils/DOMUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DOMUtils.js~_ApplyFunctionToHTMLChildren",
    "access": "private",
    "export": true,
    "importPath": "experimentJS/src/utils/DOMUtils.js",
    "importStyle": "{_ApplyFunctionToHTMLChildren}",
    "description": "Created by kai on 6/7/17.",
    "lineNumber": 6,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      },
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "DOM_remove",
    "memberof": "src/utils/DOMUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DOMUtils.js~DOM_remove",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/DOMUtils.js",
    "importStyle": "{DOM_remove}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/utils/NumberUtils.js",
    "content": "/**\n * Created by kai on 5/1/17.\n */\nexport function isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n\nexport function isInt(value) {\n    if (isNaN(value)) {\n        return false;\n    }\n    var x = parseFloat(value);\n    return (x | 0) === x;\n}\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/NumberUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "isFloat",
    "memberof": "src/utils/NumberUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/NumberUtils.js~isFloat",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/NumberUtils.js",
    "importStyle": "{isFloat}",
    "description": "Created by kai on 5/1/17.",
    "lineNumber": 4,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "isInt",
    "memberof": "src/utils/NumberUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/NumberUtils.js~isInt",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/NumberUtils.js",
    "importStyle": "{isInt}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/utils/SetCSSOnElement.js",
    "content": "/**\n * Created by kai on 6/7/17.\n */\nexport function SetCSSOnElement(elem, css){\n    var keys = Object.keys(css);\n    for (var i = 0; i < keys.length; i++){\n        var attribute = keys[i];\n        elem.style[attribute] = css[attribute];\n    }\n}\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/SetCSSOnElement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "SetCSSOnElement",
    "memberof": "src/utils/SetCSSOnElement.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/SetCSSOnElement.js~SetCSSOnElement",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/SetCSSOnElement.js",
    "importStyle": "{SetCSSOnElement}",
    "description": "Created by kai on 6/7/17.",
    "lineNumber": 4,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      },
      {
        "name": "css",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/utils/Shuffle.js",
    "content": "// - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -\n//                                          Fischer Yates Shuffle\n// - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -\nArray.prototype.shuffle = function () {\n    var currentIndex = this.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = this[currentIndex];\n        this[currentIndex] = this[randomIndex];\n        this[randomIndex] = temporaryValue;\n    }\n};\n\n\nArray.prototype.back = function(){\n    if (this.length > 0){\n        return this[this.length - 1];\n    }\n};",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/Shuffle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "shuffle",
    "memberof": "src/utils/Shuffle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Shuffle.js~shuffle",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/Shuffle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "back",
    "memberof": "src/utils/Shuffle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Shuffle.js~back",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/Shuffle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/utils/StringUtils.js",
    "content": "\n// - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -\n//                                          String Utils\n// - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -\n\nexport function camelToSentenceCase(str) {\n    return str.split(/(?=[A-Z])/).join(\" \").toLowerCase();\n}\n\nexport function getParamNames(fn){\n    //wrap these so as not to pollute the namespace\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    var ARGUMENT_NAMES = /([^\\s,]+)/g;\n    function _getParamNames(func) {\n        var fnStr = func.toString().replace(STRIP_COMMENTS, \"\");\n        var result = fnStr.slice(fnStr.indexOf(\"(\")+1, fnStr.indexOf(\")\")).match(ARGUMENT_NAMES);\n        if(result === null)\n            result = [];\n        return result;\n    }\n\n    return _getParamNames(fn);\n}\n\nString.prototype.formatUnicorn = String.prototype.formatUnicorn ||\n    function () {\n        \"use strict\";\n        var str = this.toString();\n        if (arguments.length) {\n            var t = typeof arguments[0];\n            var key;\n            var args = (\"string\" === t || \"number\" === t) ?\n                Array.prototype.slice.call(arguments)\n                : arguments[0];\n\n            for (key in args) {\n                str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), args[key]);\n            }\n        }\n\n        return str;\n\n    };\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/StringUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "camelToSentenceCase",
    "memberof": "src/utils/StringUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/StringUtils.js~camelToSentenceCase",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/StringUtils.js",
    "importStyle": "{camelToSentenceCase}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "getParamNames",
    "memberof": "src/utils/StringUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/StringUtils.js~getParamNames",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/StringUtils.js",
    "importStyle": "{getParamNames}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/utils/jQueryUtils.js",
    "content": "/**\n * Created by kai on 6/7/17.\n */\n\n\n// var arr = [];\n\n// var document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\n// var slice = arr.slice;\n\n// var concat = arr.concat;\n\n// var push = arr.push;\n\n// var indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n// Taken from Jquery\n// extend(bool deep_copy (must be true), object dest, object src, object src2 .... object srcN )\nexport function extend() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && !(typeof target === \"function\") ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                src = target[ name ];\n                copy = options[ name ];\n\n                // Prevent never-ending loop\n                if ( target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n                    if ( copyIsArray ) {\n                        copyIsArray = false;\n                        clone = src && Array.isArray( src ) ? src : [];\n\n                    } else {\n                        clone = src && isPlainObject( src ) ? src : {};\n                    }\n\n                    // Never move original objects, clone them\n                    target[ name ] = extend( deep, clone, copy );\n\n                    // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n}\n\n\nexport function isPlainObject( obj ) {\n    var proto, Ctor;\n\n    // Detect obvious negatives\n    // Use toString instead of jQuery.type to catch host objects\n    if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n        return false;\n    }\n\n    proto = getProto( obj );\n\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\n    if ( !proto ) {\n        return true;\n    }\n\n    // Objects with prototype are plain iff they were constructed by a global Object function\n    Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n    return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n}\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/jQueryUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "getProto",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~getProto",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": "Created by kai on 6/7/17.",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "class2type",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~class2type",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "toString",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~toString",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "hasOwn",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~hasOwn",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "fnToString",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~fnToString",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "ObjectFunctionString",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~ObjectFunctionString",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "support",
    "memberof": "src/utils/jQueryUtils.js",
    "static": true,
    "longname": "src/utils/jQueryUtils.js~support",
    "access": "public",
    "export": false,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "extend",
    "memberof": "src/utils/jQueryUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jQueryUtils.js~extend",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": "{extend}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "isPlainObject",
    "memberof": "src/utils/jQueryUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jQueryUtils.js~isPlainObject",
    "access": "public",
    "export": true,
    "importPath": "experimentJS/src/utils/jQueryUtils.js",
    "importStyle": "{isPlainObject}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/utils/utils.js",
    "content": "/**\n * Created by kai on 5/1/17.\n */\n\nimport \"./CreateDownloadLink.js\";\nimport \"./Shuffle.js\";\nimport \"./NumberUtils.js\";\nimport \"./StringUtils.js\";\n",
    "static": true,
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/src/utils/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "This is  aread me please god work already!\n",
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"experimentJS\",\n  \"version\": \"0.0.1\",\n  \"description\": \"An experiment framework\",\n  \"files\": [\n    \"src\"\n  ],\n  \"scripts\": {\n    \"demo\": \"echo lol\",\n    \"build\": \"rollup -c\",\n    \"build-uglify-old\": \"rollup -c && uglifyjs dist/three.js -cm --preamble \\\"// threejs.org/license\\\" > dist/three.min.js\",\n    \"build-uglify\": \"rollup -c && uglifyjs dist/experimentJS.js > dist/experimentJS.min.js\",\n    \"build-browserify\": \"browserify src/ExperimentJS.js -o dist/experimentJS.js -t [ babelify --presets [ es2015 ]  ] -s ExperimentJS && uglifyjs dist/experimentJS.js > dist/experimentJS.min.js\",\n    \"build-bfy-closure\": \"browserify src/ExperimentJS.js -o dist/experimentJS.js -t [ babelify --presets [ es2015 ]  ] -s ExperimentJS && java -jar tools/closure-compiler.jar --js dist/experimentJS.js --js_output_file dist/experimentJS.min.js\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint src\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.1\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babelify\": \"^7.3.0\",\n    \"browserify\": \"^14.4.0\",\n    \"concat-map\": \"0.0.1\",\n    \"eslint\": \"^3.12.2\",\n    \"eslint-config-mdcs\": \"^4.2.2\",\n    \"google-closure-compiler\": \"^20170626.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-sourcemaps\": \"^2.6.0\",\n    \"jquery\": \"^3.2.1\",\n    \"lodash\": \"^4.17.4\",\n    \"os-homedir\": \"^1.0.2\",\n    \"rollup\": \"^0.36.4\",\n    \"rollup-watch\": \"^2.5.0\",\n    \"serially\": \"^3.0.3\",\n    \"strip-ansi\": \"^3.0.1\",\n    \"uglify-js\": \"^2.6.0\",\n    \"uglifyify\": \"^4.0.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.1.0\",\n    \"watchify\": \"^3.9.0\"\n  },\n  \"dependencies\": {\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/Users/kai/Dropbox/Programming/Web/__projects__/ExperimentJS/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]